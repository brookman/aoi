#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.62.1.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_get_adapters__static_method__AoiAdapter_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "get_adapters__static_method__AoiAdapter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Ok(AoiAdapter::get_adapters()),
    )
}
fn wire_start_scan__method__AoiAdapter_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiAdapter> + UnwindSafe,
    filter: impl Wire2Api<Option<FilterCriteria>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "start_scan__method__AoiAdapter",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_filter = filter.wire2api();
            move |task_callback| {
                AoiAdapter::start_scan(&api_that, api_filter, task_callback.stream_sink())
            }
        },
    )
}
fn wire_stop_scan__method__AoiAdapter_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiAdapter> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "stop_scan__method__AoiAdapter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| AoiAdapter::stop_scan(&api_that)
        },
    )
}
fn wire_connect__method__AoiPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiPeripheral> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "connect__method__AoiPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| AoiPeripheral::connect(&api_that)
        },
    )
}
fn wire_read__method__AoiConnectedPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiConnectedPeripheral> + UnwindSafe,
    characteristic: impl Wire2Api<AoiCharacteristic> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "read__method__AoiConnectedPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_characteristic = characteristic.wire2api();
            move |task_callback| AoiConnectedPeripheral::read(&api_that, api_characteristic)
        },
    )
}
fn wire_write__method__AoiConnectedPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiConnectedPeripheral> + UnwindSafe,
    characteristic: impl Wire2Api<AoiCharacteristic> + UnwindSafe,
    data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "write__method__AoiConnectedPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_characteristic = characteristic.wire2api();
            let api_data = data.wire2api();
            move |task_callback| {
                AoiConnectedPeripheral::write(&api_that, api_characteristic, api_data)
            }
        },
    )
}
fn wire_write_without_response__method__AoiConnectedPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiConnectedPeripheral> + UnwindSafe,
    characteristic: impl Wire2Api<AoiCharacteristic> + UnwindSafe,
    data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "write_without_response__method__AoiConnectedPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_characteristic = characteristic.wire2api();
            let api_data = data.wire2api();
            move |task_callback| {
                AoiConnectedPeripheral::write_without_response(
                    &api_that,
                    api_characteristic,
                    api_data,
                )
            }
        },
    )
}
fn wire_disconnect__method__AoiConnectedPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiConnectedPeripheral> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap(
        WrapInfo {
            debug_name: "disconnect__method__AoiConnectedPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| AoiConnectedPeripheral::disconnect(&api_that)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for AoiAdapter {
    fn into_dart(self) -> support::DartAbi {
        vec![self.index.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiAdapter {}

impl support::IntoDart for AoiCharacteristic {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.uuid.into_dart(),
            self.service_uuid.into_dart(),
            self.properties_bits.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiCharacteristic {}

impl support::IntoDart for AoiConnectedPeripheral {
    fn into_dart(self) -> support::DartAbi {
        vec![
            (*self.peripheral).into_dart(),
            self.characteristics.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiConnectedPeripheral {}

impl support::IntoDart for AoiManufacturerData {
    fn into_dart(self) -> support::DartAbi {
        vec![self.manufacturer_id.into_dart(), self.data.into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiManufacturerData {}

impl support::IntoDart for AoiPeripheral {
    fn into_dart(self) -> support::DartAbi {
        vec![
            (*self.adapter).into_dart(),
            self.name.into_dart(),
            (*self.address).into_dart(),
            self.services.into_dart(),
            self.manufacturer_data.into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiPeripheral {}

impl support::IntoDart for AoiPeripheralAddress {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::MacAddress(field0) => vec![0.into_dart(), field0.into_dart()],
            Self::Uuid(field0) => vec![1.into_dart(), field0.into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiPeripheralAddress {}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

#[cfg(not(target_family = "wasm"))]
#[path = "bridge_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
