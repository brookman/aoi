// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

// Section: imports

use super::*;
use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate_io!();

// Section: dart2rust

impl CstDecode<flutter_rust_bridge::for_generated::anyhow::Error>
    for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> flutter_rust_bridge::for_generated::anyhow::Error {
        unimplemented!()
    }
}
impl CstDecode<StreamSink<crate::api::AoiPeripheral, flutter_rust_bridge::for_generated::DcoCodec>>
    for *mut wire_cst_list_prim_u_8_strict
{
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(
        self,
    ) -> StreamSink<crate::api::AoiPeripheral, flutter_rust_bridge::for_generated::DcoCodec> {
        let raw: String = self.cst_decode();
        StreamSink::deserialize(raw)
    }
}
impl CstDecode<String> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> String {
        let vec: Vec<u8> = self.cst_decode();
        String::from_utf8(vec).unwrap()
    }
}
impl CstDecode<crate::api::AoiAdapter> for wire_cst_aoi_adapter {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiAdapter {
        crate::api::AoiAdapter {
            index: self.index.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::AoiCharacteristic> for wire_cst_aoi_characteristic {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiCharacteristic {
        crate::api::AoiCharacteristic {
            uuid: self.uuid.cst_decode(),
            service_uuid: self.service_uuid.cst_decode(),
            properties_bits: self.properties_bits.cst_decode(),
            descriptors: self.descriptors.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::AoiConnectedPeripheral> for wire_cst_aoi_connected_peripheral {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiConnectedPeripheral {
        crate::api::AoiConnectedPeripheral {
            peripheral: self.peripheral.cst_decode(),
            characteristics: self.characteristics.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::AoiDescriptor> for wire_cst_aoi_descriptor {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiDescriptor {
        crate::api::AoiDescriptor {
            uuid: self.uuid.cst_decode(),
            service_uuid: self.service_uuid.cst_decode(),
            characteristic_uuid: self.characteristic_uuid.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::AoiManufacturerData> for wire_cst_aoi_manufacturer_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiManufacturerData {
        crate::api::AoiManufacturerData {
            manufacturer_id: self.manufacturer_id.cst_decode(),
            data: self.data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::AoiPeripheral> for wire_cst_aoi_peripheral {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiPeripheral {
        crate::api::AoiPeripheral {
            adapter: self.adapter.cst_decode(),
            name: self.name.cst_decode(),
            address: self.address.cst_decode(),
            services: self.services.cst_decode(),
            manufacturer_data: self.manufacturer_data.cst_decode(),
        }
    }
}
impl CstDecode<crate::api::AoiPeripheralAddress> for wire_cst_aoi_peripheral_address {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiPeripheralAddress {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.MacAddress };
                crate::api::AoiPeripheralAddress::MacAddress(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.Uuid };
                crate::api::AoiPeripheralAddress::Uuid(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.DeviceId };
                crate::api::AoiPeripheralAddress::DeviceId(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<Box<crate::api::AoiAdapter>> for *mut wire_cst_aoi_adapter {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::AoiAdapter> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::AoiAdapter>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::AoiPeripheral>> for *mut wire_cst_aoi_peripheral {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::AoiPeripheral> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::AoiPeripheral>::cst_decode(*wrap).into()
    }
}
impl CstDecode<Box<crate::api::AoiPeripheralAddress>> for *mut wire_cst_aoi_peripheral_address {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Box<crate::api::AoiPeripheralAddress> {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::AoiPeripheralAddress>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::AoiAdapter> for *mut wire_cst_aoi_adapter {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiAdapter {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::AoiAdapter>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::AoiCharacteristic> for *mut wire_cst_aoi_characteristic {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiCharacteristic {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::AoiCharacteristic>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::AoiConnectedPeripheral> for *mut wire_cst_aoi_connected_peripheral {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiConnectedPeripheral {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::AoiConnectedPeripheral>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::AoiPeripheral> for *mut wire_cst_aoi_peripheral {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::AoiPeripheral {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::AoiPeripheral>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::FilterCriteria> for *mut wire_cst_filter_criteria {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::FilterCriteria {
        let wrap = unsafe { flutter_rust_bridge::for_generated::box_from_leak_ptr(self) };
        CstDecode::<crate::api::FilterCriteria>::cst_decode(*wrap).into()
    }
}
impl CstDecode<crate::api::FilterCriteria> for wire_cst_filter_criteria {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::FilterCriteria {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.Any };
                crate::api::FilterCriteria::Any(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.All };
                crate::api::FilterCriteria::All(ans.field0.cst_decode())
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<crate::api::FilterCriterion> for wire_cst_filter_criterion {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> crate::api::FilterCriterion {
        match self.tag {
            0 => {
                let ans = unsafe { self.kind.HasServiceUuid };
                crate::api::FilterCriterion::HasServiceUuid(ans.field0.cst_decode())
            }
            1 => {
                let ans = unsafe { self.kind.NameMatchesExactly };
                crate::api::FilterCriterion::NameMatchesExactly(ans.field0.cst_decode())
            }
            2 => {
                let ans = unsafe { self.kind.NameContains };
                crate::api::FilterCriterion::NameContains(ans.field0.cst_decode())
            }
            3 => {
                let ans = unsafe { self.kind.ManufacturerId };
                crate::api::FilterCriterion::ManufacturerId(ans.field0.cst_decode())
            }
            4 => {
                let ans = unsafe { self.kind.ManufacturerData };
                crate::api::FilterCriterion::ManufacturerData(
                    ans.field0.cst_decode(),
                    ans.field1.cst_decode(),
                )
            }
            _ => unreachable!(),
        }
    }
}
impl CstDecode<Vec<String>> for *mut wire_cst_list_String {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<String> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::AoiAdapter>> for *mut wire_cst_list_aoi_adapter {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::AoiAdapter> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::AoiCharacteristic>> for *mut wire_cst_list_aoi_characteristic {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::AoiCharacteristic> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::AoiDescriptor>> for *mut wire_cst_list_aoi_descriptor {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::AoiDescriptor> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::AoiManufacturerData>> for *mut wire_cst_list_aoi_manufacturer_data {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::AoiManufacturerData> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<crate::api::FilterCriterion>> for *mut wire_cst_list_filter_criterion {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<crate::api::FilterCriterion> {
        let vec = unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        };
        vec.into_iter().map(CstDecode::cst_decode).collect()
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_loose {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<Vec<u8>> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> Vec<u8> {
        unsafe {
            let wrap = flutter_rust_bridge::for_generated::box_from_leak_ptr(self);
            flutter_rust_bridge::for_generated::vec_from_leak_ptr(wrap.ptr, wrap.len)
        }
    }
}
impl CstDecode<[u8; 6]> for *mut wire_cst_list_prim_u_8_strict {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> [u8; 6] {
        let vec: Vec<u8> = self.cst_decode();
        flutter_rust_bridge::for_generated::from_vec_to_array(vec)
    }
}
impl NewWithNullPtr for wire_cst_aoi_adapter {
    fn new_with_null_ptr() -> Self {
        Self {
            index: Default::default(),
        }
    }
}
impl Default for wire_cst_aoi_adapter {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_aoi_characteristic {
    fn new_with_null_ptr() -> Self {
        Self {
            uuid: core::ptr::null_mut(),
            service_uuid: core::ptr::null_mut(),
            properties_bits: Default::default(),
            descriptors: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_aoi_characteristic {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_aoi_connected_peripheral {
    fn new_with_null_ptr() -> Self {
        Self {
            peripheral: core::ptr::null_mut(),
            characteristics: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_aoi_connected_peripheral {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_aoi_descriptor {
    fn new_with_null_ptr() -> Self {
        Self {
            uuid: core::ptr::null_mut(),
            service_uuid: core::ptr::null_mut(),
            characteristic_uuid: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_aoi_descriptor {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_aoi_manufacturer_data {
    fn new_with_null_ptr() -> Self {
        Self {
            manufacturer_id: Default::default(),
            data: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_aoi_manufacturer_data {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_aoi_peripheral {
    fn new_with_null_ptr() -> Self {
        Self {
            adapter: core::ptr::null_mut(),
            name: core::ptr::null_mut(),
            address: core::ptr::null_mut(),
            services: core::ptr::null_mut(),
            manufacturer_data: core::ptr::null_mut(),
        }
    }
}
impl Default for wire_cst_aoi_peripheral {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_aoi_peripheral_address {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: AoiPeripheralAddressKind { nil__: () },
        }
    }
}
impl Default for wire_cst_aoi_peripheral_address {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_filter_criteria {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: FilterCriteriaKind { nil__: () },
        }
    }
}
impl Default for wire_cst_filter_criteria {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}
impl NewWithNullPtr for wire_cst_filter_criterion {
    fn new_with_null_ptr() -> Self {
        Self {
            tag: -1,
            kind: FilterCriterionKind { nil__: () },
        }
    }
}
impl Default for wire_cst_filter_criterion {
    fn default() -> Self {
        Self::new_with_null_ptr()
    }
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_wire_aoi_adapter_get_adapters(port_: i64) {
    wire_aoi_adapter_get_adapters_impl(port_)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_wire_aoi_adapter_start_scan(
    port_: i64,
    that: *mut wire_cst_aoi_adapter,
    filter: *mut wire_cst_filter_criteria,
    sink: *mut wire_cst_list_prim_u_8_strict,
) {
    wire_aoi_adapter_start_scan_impl(port_, that, filter, sink)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_wire_aoi_adapter_stop_scan(
    port_: i64,
    that: *mut wire_cst_aoi_adapter,
) {
    wire_aoi_adapter_stop_scan_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_wire_aoi_connected_peripheral_disconnect(
    port_: i64,
    that: *mut wire_cst_aoi_connected_peripheral,
) {
    wire_aoi_connected_peripheral_disconnect_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_wire_aoi_connected_peripheral_read(
    port_: i64,
    that: *mut wire_cst_aoi_connected_peripheral,
    characteristic: *mut wire_cst_aoi_characteristic,
) {
    wire_aoi_connected_peripheral_read_impl(port_, that, characteristic)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_wire_aoi_connected_peripheral_write(
    port_: i64,
    that: *mut wire_cst_aoi_connected_peripheral,
    characteristic: *mut wire_cst_aoi_characteristic,
    data: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_aoi_connected_peripheral_write_impl(port_, that, characteristic, data)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_wire_aoi_connected_peripheral_write_without_response(
    port_: i64,
    that: *mut wire_cst_aoi_connected_peripheral,
    characteristic: *mut wire_cst_aoi_characteristic,
    data: *mut wire_cst_list_prim_u_8_loose,
) {
    wire_aoi_connected_peripheral_write_without_response_impl(port_, that, characteristic, data)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_wire_aoi_peripheral_connect(
    port_: i64,
    that: *mut wire_cst_aoi_peripheral,
) {
    wire_aoi_peripheral_connect_impl(port_, that)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_box_aoi_adapter() -> *mut wire_cst_aoi_adapter {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_aoi_adapter::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_box_aoi_peripheral() -> *mut wire_cst_aoi_peripheral {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_aoi_peripheral::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_box_aoi_peripheral_address(
) -> *mut wire_cst_aoi_peripheral_address {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_aoi_peripheral_address::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_box_autoadd_aoi_adapter() -> *mut wire_cst_aoi_adapter {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wire_cst_aoi_adapter::new_with_null_ptr())
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_box_autoadd_aoi_characteristic(
) -> *mut wire_cst_aoi_characteristic {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_aoi_characteristic::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_box_autoadd_aoi_connected_peripheral(
) -> *mut wire_cst_aoi_connected_peripheral {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_aoi_connected_peripheral::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_box_autoadd_aoi_peripheral() -> *mut wire_cst_aoi_peripheral {
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_aoi_peripheral::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_box_autoadd_filter_criteria() -> *mut wire_cst_filter_criteria
{
    flutter_rust_bridge::for_generated::new_leak_box_ptr(
        wire_cst_filter_criteria::new_with_null_ptr(),
    )
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_list_String(len: i32) -> *mut wire_cst_list_String {
    let wrap = wire_cst_list_String {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <*mut wire_cst_list_prim_u_8_strict>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_list_aoi_adapter(len: i32) -> *mut wire_cst_list_aoi_adapter {
    let wrap = wire_cst_list_aoi_adapter {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_aoi_adapter>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_list_aoi_characteristic(
    len: i32,
) -> *mut wire_cst_list_aoi_characteristic {
    let wrap = wire_cst_list_aoi_characteristic {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_aoi_characteristic>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_list_aoi_descriptor(
    len: i32,
) -> *mut wire_cst_list_aoi_descriptor {
    let wrap = wire_cst_list_aoi_descriptor {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_aoi_descriptor>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_list_aoi_manufacturer_data(
    len: i32,
) -> *mut wire_cst_list_aoi_manufacturer_data {
    let wrap = wire_cst_list_aoi_manufacturer_data {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_aoi_manufacturer_data>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_list_filter_criterion(
    len: i32,
) -> *mut wire_cst_list_filter_criterion {
    let wrap = wire_cst_list_filter_criterion {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(
            <wire_cst_filter_criterion>::new_with_null_ptr(),
            len,
        ),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(wrap)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_list_prim_u_8_loose(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_loose {
    let ans = wire_cst_list_prim_u_8_loose {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[no_mangle]
pub extern "C" fn frbgen_aoi_cst_new_list_prim_u_8_strict(
    len: i32,
) -> *mut wire_cst_list_prim_u_8_strict {
    let ans = wire_cst_list_prim_u_8_strict {
        ptr: flutter_rust_bridge::for_generated::new_leak_vec_ptr(Default::default(), len),
        len,
    };
    flutter_rust_bridge::for_generated::new_leak_box_ptr(ans)
}

#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aoi_adapter {
    index: usize,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aoi_characteristic {
    uuid: *mut wire_cst_list_prim_u_8_strict,
    service_uuid: *mut wire_cst_list_prim_u_8_strict,
    properties_bits: u8,
    descriptors: *mut wire_cst_list_aoi_descriptor,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aoi_connected_peripheral {
    peripheral: *mut wire_cst_aoi_peripheral,
    characteristics: *mut wire_cst_list_aoi_characteristic,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aoi_descriptor {
    uuid: *mut wire_cst_list_prim_u_8_strict,
    service_uuid: *mut wire_cst_list_prim_u_8_strict,
    characteristic_uuid: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aoi_manufacturer_data {
    manufacturer_id: u16,
    data: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aoi_peripheral {
    adapter: *mut wire_cst_aoi_adapter,
    name: *mut wire_cst_list_prim_u_8_strict,
    address: *mut wire_cst_aoi_peripheral_address,
    services: *mut wire_cst_list_String,
    manufacturer_data: *mut wire_cst_list_aoi_manufacturer_data,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_aoi_peripheral_address {
    tag: i32,
    kind: AoiPeripheralAddressKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union AoiPeripheralAddressKind {
    MacAddress: wire_cst_AoiPeripheralAddress_MacAddress,
    Uuid: wire_cst_AoiPeripheralAddress_Uuid,
    DeviceId: wire_cst_AoiPeripheralAddress_DeviceId,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AoiPeripheralAddress_MacAddress {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AoiPeripheralAddress_Uuid {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_AoiPeripheralAddress_DeviceId {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_filter_criteria {
    tag: i32,
    kind: FilterCriteriaKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union FilterCriteriaKind {
    Any: wire_cst_FilterCriteria_Any,
    All: wire_cst_FilterCriteria_All,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_FilterCriteria_Any {
    field0: *mut wire_cst_list_filter_criterion,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_FilterCriteria_All {
    field0: *mut wire_cst_list_filter_criterion,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_filter_criterion {
    tag: i32,
    kind: FilterCriterionKind,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub union FilterCriterionKind {
    HasServiceUuid: wire_cst_FilterCriterion_HasServiceUuid,
    NameMatchesExactly: wire_cst_FilterCriterion_NameMatchesExactly,
    NameContains: wire_cst_FilterCriterion_NameContains,
    ManufacturerId: wire_cst_FilterCriterion_ManufacturerId,
    ManufacturerData: wire_cst_FilterCriterion_ManufacturerData,
    nil__: (),
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_FilterCriterion_HasServiceUuid {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_FilterCriterion_NameMatchesExactly {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_FilterCriterion_NameContains {
    field0: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_FilterCriterion_ManufacturerId {
    field0: u16,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_FilterCriterion_ManufacturerData {
    field0: u16,
    field1: *mut wire_cst_list_prim_u_8_strict,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_String {
    ptr: *mut *mut wire_cst_list_prim_u_8_strict,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_aoi_adapter {
    ptr: *mut wire_cst_aoi_adapter,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_aoi_characteristic {
    ptr: *mut wire_cst_aoi_characteristic,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_aoi_descriptor {
    ptr: *mut wire_cst_aoi_descriptor,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_aoi_manufacturer_data {
    ptr: *mut wire_cst_aoi_manufacturer_data,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_filter_criterion {
    ptr: *mut wire_cst_filter_criterion,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_loose {
    ptr: *mut u8,
    len: i32,
}
#[repr(C)]
#[derive(Clone, Copy)]
pub struct wire_cst_list_prim_u_8_strict {
    ptr: *mut u8,
    len: i32,
}
