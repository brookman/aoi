#![allow(
    non_camel_case_types,
    unused,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::double_parens,
    non_snake_case,
    clippy::too_many_arguments
)]
// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.

use crate::api::*;
use core::panic::UnwindSafe;
use flutter_rust_bridge::rust2dart::IntoIntoDart;
use flutter_rust_bridge::*;
use std::ffi::c_void;
use std::sync::Arc;

// Section: imports

// Section: wire functions

fn wire_get_adapters__static_method__AoiAdapter_impl(port_: MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<AoiAdapter>, _>(
        WrapInfo {
            debug_name: "get_adapters__static_method__AoiAdapter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || move |task_callback| Result::<_, ()>::Ok(AoiAdapter::get_adapters()),
    )
}
fn wire_start_scan__method__AoiAdapter_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiAdapter> + UnwindSafe,
    filter: impl Wire2Api<Option<FilterCriteria>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "start_scan__method__AoiAdapter",
            port: Some(port_),
            mode: FfiCallMode::Stream,
        },
        move || {
            let api_that = that.wire2api();
            let api_filter = filter.wire2api();
            move |task_callback| {
                AoiAdapter::start_scan(
                    &api_that,
                    api_filter,
                    task_callback.stream_sink::<_, AoiPeripheral>(),
                )
            }
        },
    )
}
fn wire_stop_scan__method__AoiAdapter_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiAdapter> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "stop_scan__method__AoiAdapter",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| AoiAdapter::stop_scan(&api_that)
        },
    )
}
fn wire_connect__method__AoiPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiPeripheral> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, AoiConnectedPeripheral, _>(
        WrapInfo {
            debug_name: "connect__method__AoiPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| AoiPeripheral::connect(&api_that)
        },
    )
}
fn wire_read__method__AoiConnectedPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiConnectedPeripheral> + UnwindSafe,
    characteristic: impl Wire2Api<AoiCharacteristic> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, Vec<u8>, _>(
        WrapInfo {
            debug_name: "read__method__AoiConnectedPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_characteristic = characteristic.wire2api();
            move |task_callback| AoiConnectedPeripheral::read(&api_that, api_characteristic)
        },
    )
}
fn wire_write__method__AoiConnectedPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiConnectedPeripheral> + UnwindSafe,
    characteristic: impl Wire2Api<AoiCharacteristic> + UnwindSafe,
    data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "write__method__AoiConnectedPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_characteristic = characteristic.wire2api();
            let api_data = data.wire2api();
            move |task_callback| {
                AoiConnectedPeripheral::write(&api_that, api_characteristic, api_data)
            }
        },
    )
}
fn wire_write_without_response__method__AoiConnectedPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiConnectedPeripheral> + UnwindSafe,
    characteristic: impl Wire2Api<AoiCharacteristic> + UnwindSafe,
    data: impl Wire2Api<Vec<u8>> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "write_without_response__method__AoiConnectedPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            let api_characteristic = characteristic.wire2api();
            let api_data = data.wire2api();
            move |task_callback| {
                AoiConnectedPeripheral::write_without_response(
                    &api_that,
                    api_characteristic,
                    api_data,
                )
            }
        },
    )
}
fn wire_disconnect__method__AoiConnectedPeripheral_impl(
    port_: MessagePort,
    that: impl Wire2Api<AoiConnectedPeripheral> + UnwindSafe,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap::<_, _, _, (), _>(
        WrapInfo {
            debug_name: "disconnect__method__AoiConnectedPeripheral",
            port: Some(port_),
            mode: FfiCallMode::Normal,
        },
        move || {
            let api_that = that.wire2api();
            move |task_callback| AoiConnectedPeripheral::disconnect(&api_that)
        },
    )
}
// Section: wrapper structs

// Section: static checks

// Section: allocate functions

// Section: related functions

// Section: impl Wire2Api

pub trait Wire2Api<T> {
    fn wire2api(self) -> T;
}

impl<T, S> Wire2Api<Option<T>> for *mut S
where
    *mut S: Wire2Api<T>,
{
    fn wire2api(self) -> Option<T> {
        (!self.is_null()).then(|| self.wire2api())
    }
}

impl Wire2Api<u16> for u16 {
    fn wire2api(self) -> u16 {
        self
    }
}
impl Wire2Api<u8> for u8 {
    fn wire2api(self) -> u8 {
        self
    }
}

impl Wire2Api<usize> for usize {
    fn wire2api(self) -> usize {
        self
    }
}
// Section: impl IntoDart

impl support::IntoDart for AoiAdapter {
    fn into_dart(self) -> support::DartAbi {
        vec![self.index.into_into_dart().into_dart()].into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiAdapter {}
impl rust2dart::IntoIntoDart<AoiAdapter> for AoiAdapter {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for AoiCharacteristic {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.uuid.into_into_dart().into_dart(),
            self.service_uuid.into_into_dart().into_dart(),
            self.properties_bits.into_into_dart().into_dart(),
            self.descriptors.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiCharacteristic {}
impl rust2dart::IntoIntoDart<AoiCharacteristic> for AoiCharacteristic {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for AoiConnectedPeripheral {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.peripheral.into_into_dart().into_dart(),
            self.characteristics.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiConnectedPeripheral {}
impl rust2dart::IntoIntoDart<AoiConnectedPeripheral> for AoiConnectedPeripheral {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for AoiDescriptor {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.uuid.into_into_dart().into_dart(),
            self.service_uuid.into_into_dart().into_dart(),
            self.characteristic_uuid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiDescriptor {}
impl rust2dart::IntoIntoDart<AoiDescriptor> for AoiDescriptor {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for AoiManufacturerData {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.manufacturer_id.into_into_dart().into_dart(),
            self.data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiManufacturerData {}
impl rust2dart::IntoIntoDart<AoiManufacturerData> for AoiManufacturerData {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for AoiPeripheral {
    fn into_dart(self) -> support::DartAbi {
        vec![
            self.adapter.into_into_dart().into_dart(),
            self.name.into_dart(),
            self.address.into_into_dart().into_dart(),
            self.services.into_into_dart().into_dart(),
            self.manufacturer_data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiPeripheral {}
impl rust2dart::IntoIntoDart<AoiPeripheral> for AoiPeripheral {
    fn into_into_dart(self) -> Self {
        self
    }
}

impl support::IntoDart for AoiPeripheralAddress {
    fn into_dart(self) -> support::DartAbi {
        match self {
            Self::MacAddress(field0) => vec![0.into_dart(), field0.into_into_dart().into_dart()],
            Self::Uuid(field0) => vec![1.into_dart(), field0.into_into_dart().into_dart()],
        }
        .into_dart()
    }
}
impl support::IntoDartExceptPrimitive for AoiPeripheralAddress {}
impl rust2dart::IntoIntoDart<AoiPeripheralAddress> for AoiPeripheralAddress {
    fn into_into_dart(self) -> Self {
        self
    }
}

// Section: executor

support::lazy_static! {
    pub static ref FLUTTER_RUST_BRIDGE_HANDLER: support::DefaultHandler = Default::default();
}

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    use super::*;
    // Section: wire functions

    #[wasm_bindgen]
    pub fn wire_get_adapters__static_method__AoiAdapter(port_: MessagePort) {
        wire_get_adapters__static_method__AoiAdapter_impl(port_)
    }

    #[wasm_bindgen]
    pub fn wire_start_scan__method__AoiAdapter(port_: MessagePort, that: JsValue, filter: JsValue) {
        wire_start_scan__method__AoiAdapter_impl(port_, that, filter)
    }

    #[wasm_bindgen]
    pub fn wire_stop_scan__method__AoiAdapter(port_: MessagePort, that: JsValue) {
        wire_stop_scan__method__AoiAdapter_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_connect__method__AoiPeripheral(port_: MessagePort, that: JsValue) {
        wire_connect__method__AoiPeripheral_impl(port_, that)
    }

    #[wasm_bindgen]
    pub fn wire_read__method__AoiConnectedPeripheral(
        port_: MessagePort,
        that: JsValue,
        characteristic: JsValue,
    ) {
        wire_read__method__AoiConnectedPeripheral_impl(port_, that, characteristic)
    }

    #[wasm_bindgen]
    pub fn wire_write__method__AoiConnectedPeripheral(
        port_: MessagePort,
        that: JsValue,
        characteristic: JsValue,
        data: Box<[u8]>,
    ) {
        wire_write__method__AoiConnectedPeripheral_impl(port_, that, characteristic, data)
    }

    #[wasm_bindgen]
    pub fn wire_write_without_response__method__AoiConnectedPeripheral(
        port_: MessagePort,
        that: JsValue,
        characteristic: JsValue,
        data: Box<[u8]>,
    ) {
        wire_write_without_response__method__AoiConnectedPeripheral_impl(
            port_,
            that,
            characteristic,
            data,
        )
    }

    #[wasm_bindgen]
    pub fn wire_disconnect__method__AoiConnectedPeripheral(port_: MessagePort, that: JsValue) {
        wire_disconnect__method__AoiConnectedPeripheral_impl(port_, that)
    }

    // Section: allocate functions

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for String {
        fn wire2api(self) -> String {
            self
        }
    }
    impl Wire2Api<Vec<String>> for JsValue {
        fn wire2api(self) -> Vec<String> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<AoiAdapter> for JsValue {
        fn wire2api(self) -> AoiAdapter {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                1,
                "Expected 1 elements, got {}",
                self_.length()
            );
            AoiAdapter {
                index: self_.get(0).wire2api(),
            }
        }
    }
    impl Wire2Api<AoiCharacteristic> for JsValue {
        fn wire2api(self) -> AoiCharacteristic {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                4,
                "Expected 4 elements, got {}",
                self_.length()
            );
            AoiCharacteristic {
                uuid: self_.get(0).wire2api(),
                service_uuid: self_.get(1).wire2api(),
                properties_bits: self_.get(2).wire2api(),
                descriptors: self_.get(3).wire2api(),
            }
        }
    }
    impl Wire2Api<AoiConnectedPeripheral> for JsValue {
        fn wire2api(self) -> AoiConnectedPeripheral {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            AoiConnectedPeripheral {
                peripheral: self_.get(0).wire2api(),
                characteristics: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<AoiDescriptor> for JsValue {
        fn wire2api(self) -> AoiDescriptor {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                3,
                "Expected 3 elements, got {}",
                self_.length()
            );
            AoiDescriptor {
                uuid: self_.get(0).wire2api(),
                service_uuid: self_.get(1).wire2api(),
                characteristic_uuid: self_.get(2).wire2api(),
            }
        }
    }
    impl Wire2Api<AoiManufacturerData> for JsValue {
        fn wire2api(self) -> AoiManufacturerData {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                2,
                "Expected 2 elements, got {}",
                self_.length()
            );
            AoiManufacturerData {
                manufacturer_id: self_.get(0).wire2api(),
                data: self_.get(1).wire2api(),
            }
        }
    }
    impl Wire2Api<AoiPeripheral> for JsValue {
        fn wire2api(self) -> AoiPeripheral {
            let self_ = self.dyn_into::<JsArray>().unwrap();
            assert_eq!(
                self_.length(),
                5,
                "Expected 5 elements, got {}",
                self_.length()
            );
            AoiPeripheral {
                adapter: self_.get(0).wire2api(),
                name: self_.get(1).wire2api(),
                address: self_.get(2).wire2api(),
                services: self_.get(3).wire2api(),
                manufacturer_data: self_.get(4).wire2api(),
            }
        }
    }
    impl Wire2Api<AoiPeripheralAddress> for JsValue {
        fn wire2api(self) -> AoiPeripheralAddress {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => AoiPeripheralAddress::MacAddress(self_.get(1).wire2api()),
                1 => AoiPeripheralAddress::Uuid(self_.get(1).wire2api()),
                _ => unreachable!(),
            }
        }
    }

    impl Wire2Api<FilterCriteria> for JsValue {
        fn wire2api(self) -> FilterCriteria {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => FilterCriteria::Any(self_.get(1).wire2api()),
                1 => FilterCriteria::All(self_.get(1).wire2api()),
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<FilterCriterion> for JsValue {
        fn wire2api(self) -> FilterCriterion {
            let self_ = self.unchecked_into::<JsArray>();
            match self_.get(0).unchecked_into_f64() as _ {
                0 => FilterCriterion::HasServiceUuid(self_.get(1).wire2api()),
                1 => FilterCriterion::NameMatchesExactly(self_.get(1).wire2api()),
                2 => FilterCriterion::NameContains(self_.get(1).wire2api()),
                3 => FilterCriterion::ManufacturerId(self_.get(1).wire2api()),
                4 => FilterCriterion::ManufacturerData(
                    self_.get(1).wire2api(),
                    self_.get(2).wire2api(),
                ),
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<Vec<AoiCharacteristic>> for JsValue {
        fn wire2api(self) -> Vec<AoiCharacteristic> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<AoiDescriptor>> for JsValue {
        fn wire2api(self) -> Vec<AoiDescriptor> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<AoiManufacturerData>> for JsValue {
        fn wire2api(self) -> Vec<AoiManufacturerData> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Vec<FilterCriterion>> for JsValue {
        fn wire2api(self) -> Vec<FilterCriterion> {
            self.dyn_into::<JsArray>()
                .unwrap()
                .iter()
                .map(Wire2Api::wire2api)
                .collect()
        }
    }
    impl Wire2Api<Option<String>> for Option<String> {
        fn wire2api(self) -> Option<String> {
            self.map(Wire2Api::wire2api)
        }
    }

    impl Wire2Api<[u8; 6]> for Box<[u8]> {
        fn wire2api(self) -> [u8; 6] {
            let vec: Vec<u8> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }
    impl Wire2Api<Vec<u8>> for Box<[u8]> {
        fn wire2api(self) -> Vec<u8> {
            self.into_vec()
        }
    }

    // Section: impl Wire2Api for JsValue

    impl<T> Wire2Api<Option<T>> for JsValue
    where
        JsValue: Wire2Api<T>,
    {
        fn wire2api(self) -> Option<T> {
            (!self.is_null() && !self.is_undefined()).then(|| self.wire2api())
        }
    }
    impl Wire2Api<String> for JsValue {
        fn wire2api(self) -> String {
            self.as_string().expect("non-UTF-8 string, or not a string")
        }
    }
    impl Wire2Api<Box<AoiAdapter>> for JsValue {
        fn wire2api(self) -> Box<AoiAdapter> {
            Box::new(self.wire2api())
        }
    }
    impl Wire2Api<Box<AoiPeripheral>> for JsValue {
        fn wire2api(self) -> Box<AoiPeripheral> {
            Box::new(self.wire2api())
        }
    }
    impl Wire2Api<Box<AoiPeripheralAddress>> for JsValue {
        fn wire2api(self) -> Box<AoiPeripheralAddress> {
            Box::new(self.wire2api())
        }
    }
    impl Wire2Api<u16> for JsValue {
        fn wire2api(self) -> u16 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<u8> for JsValue {
        fn wire2api(self) -> u8 {
            self.unchecked_into_f64() as _
        }
    }
    impl Wire2Api<[u8; 6]> for JsValue {
        fn wire2api(self) -> [u8; 6] {
            let vec: Vec<u8> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }
    impl Wire2Api<Vec<u8>> for JsValue {
        fn wire2api(self) -> Vec<u8> {
            self.unchecked_into::<js_sys::Uint8Array>().to_vec().into()
        }
    }
    impl Wire2Api<usize> for JsValue {
        fn wire2api(self) -> usize {
            self.unchecked_into_f64() as _
        }
    }
}
#[cfg(target_family = "wasm")]
pub use self::web::*;

#[cfg(not(target_family = "wasm"))]
mod io {
    use super::*;
    // Section: wire functions

    #[no_mangle]
    pub extern "C" fn wire_get_adapters__static_method__AoiAdapter(port_: i64) {
        wire_get_adapters__static_method__AoiAdapter_impl(port_)
    }

    #[no_mangle]
    pub extern "C" fn wire_start_scan__method__AoiAdapter(
        port_: i64,
        that: *mut wire_AoiAdapter,
        filter: *mut wire_FilterCriteria,
    ) {
        wire_start_scan__method__AoiAdapter_impl(port_, that, filter)
    }

    #[no_mangle]
    pub extern "C" fn wire_stop_scan__method__AoiAdapter(port_: i64, that: *mut wire_AoiAdapter) {
        wire_stop_scan__method__AoiAdapter_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_connect__method__AoiPeripheral(
        port_: i64,
        that: *mut wire_AoiPeripheral,
    ) {
        wire_connect__method__AoiPeripheral_impl(port_, that)
    }

    #[no_mangle]
    pub extern "C" fn wire_read__method__AoiConnectedPeripheral(
        port_: i64,
        that: *mut wire_AoiConnectedPeripheral,
        characteristic: *mut wire_AoiCharacteristic,
    ) {
        wire_read__method__AoiConnectedPeripheral_impl(port_, that, characteristic)
    }

    #[no_mangle]
    pub extern "C" fn wire_write__method__AoiConnectedPeripheral(
        port_: i64,
        that: *mut wire_AoiConnectedPeripheral,
        characteristic: *mut wire_AoiCharacteristic,
        data: *mut wire_uint_8_list,
    ) {
        wire_write__method__AoiConnectedPeripheral_impl(port_, that, characteristic, data)
    }

    #[no_mangle]
    pub extern "C" fn wire_write_without_response__method__AoiConnectedPeripheral(
        port_: i64,
        that: *mut wire_AoiConnectedPeripheral,
        characteristic: *mut wire_AoiCharacteristic,
        data: *mut wire_uint_8_list,
    ) {
        wire_write_without_response__method__AoiConnectedPeripheral_impl(
            port_,
            that,
            characteristic,
            data,
        )
    }

    #[no_mangle]
    pub extern "C" fn wire_disconnect__method__AoiConnectedPeripheral(
        port_: i64,
        that: *mut wire_AoiConnectedPeripheral,
    ) {
        wire_disconnect__method__AoiConnectedPeripheral_impl(port_, that)
    }

    // Section: allocate functions

    #[no_mangle]
    pub extern "C" fn new_StringList_0(len: i32) -> *mut wire_StringList {
        let wrap = wire_StringList {
            ptr: support::new_leak_vec_ptr(<*mut wire_uint_8_list>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_box_aoi_adapter_0() -> *mut wire_AoiAdapter {
        support::new_leak_box_ptr(wire_AoiAdapter::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_aoi_peripheral_0() -> *mut wire_AoiPeripheral {
        support::new_leak_box_ptr(wire_AoiPeripheral::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_aoi_peripheral_address_0() -> *mut wire_AoiPeripheralAddress {
        support::new_leak_box_ptr(wire_AoiPeripheralAddress::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_aoi_adapter_0() -> *mut wire_AoiAdapter {
        support::new_leak_box_ptr(wire_AoiAdapter::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_aoi_characteristic_0() -> *mut wire_AoiCharacteristic {
        support::new_leak_box_ptr(wire_AoiCharacteristic::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_aoi_connected_peripheral_0(
    ) -> *mut wire_AoiConnectedPeripheral {
        support::new_leak_box_ptr(wire_AoiConnectedPeripheral::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_aoi_peripheral_0() -> *mut wire_AoiPeripheral {
        support::new_leak_box_ptr(wire_AoiPeripheral::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_box_autoadd_filter_criteria_0() -> *mut wire_FilterCriteria {
        support::new_leak_box_ptr(wire_FilterCriteria::new_with_null_ptr())
    }

    #[no_mangle]
    pub extern "C" fn new_list_aoi_characteristic_0(len: i32) -> *mut wire_list_aoi_characteristic {
        let wrap = wire_list_aoi_characteristic {
            ptr: support::new_leak_vec_ptr(<wire_AoiCharacteristic>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_aoi_descriptor_0(len: i32) -> *mut wire_list_aoi_descriptor {
        let wrap = wire_list_aoi_descriptor {
            ptr: support::new_leak_vec_ptr(<wire_AoiDescriptor>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_aoi_manufacturer_data_0(
        len: i32,
    ) -> *mut wire_list_aoi_manufacturer_data {
        let wrap = wire_list_aoi_manufacturer_data {
            ptr: support::new_leak_vec_ptr(<wire_AoiManufacturerData>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_list_filter_criterion_0(len: i32) -> *mut wire_list_filter_criterion {
        let wrap = wire_list_filter_criterion {
            ptr: support::new_leak_vec_ptr(<wire_FilterCriterion>::new_with_null_ptr(), len),
            len,
        };
        support::new_leak_box_ptr(wrap)
    }

    #[no_mangle]
    pub extern "C" fn new_uint_8_list_0(len: i32) -> *mut wire_uint_8_list {
        let ans = wire_uint_8_list {
            ptr: support::new_leak_vec_ptr(Default::default(), len),
            len,
        };
        support::new_leak_box_ptr(ans)
    }

    // Section: related functions

    // Section: impl Wire2Api

    impl Wire2Api<String> for *mut wire_uint_8_list {
        fn wire2api(self) -> String {
            let vec: Vec<u8> = self.wire2api();
            String::from_utf8_lossy(&vec).into_owned()
        }
    }
    impl Wire2Api<Vec<String>> for *mut wire_StringList {
        fn wire2api(self) -> Vec<String> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<AoiAdapter> for wire_AoiAdapter {
        fn wire2api(self) -> AoiAdapter {
            AoiAdapter {
                index: self.index.wire2api(),
            }
        }
    }
    impl Wire2Api<AoiCharacteristic> for wire_AoiCharacteristic {
        fn wire2api(self) -> AoiCharacteristic {
            AoiCharacteristic {
                uuid: self.uuid.wire2api(),
                service_uuid: self.service_uuid.wire2api(),
                properties_bits: self.properties_bits.wire2api(),
                descriptors: self.descriptors.wire2api(),
            }
        }
    }
    impl Wire2Api<AoiConnectedPeripheral> for wire_AoiConnectedPeripheral {
        fn wire2api(self) -> AoiConnectedPeripheral {
            AoiConnectedPeripheral {
                peripheral: self.peripheral.wire2api(),
                characteristics: self.characteristics.wire2api(),
            }
        }
    }
    impl Wire2Api<AoiDescriptor> for wire_AoiDescriptor {
        fn wire2api(self) -> AoiDescriptor {
            AoiDescriptor {
                uuid: self.uuid.wire2api(),
                service_uuid: self.service_uuid.wire2api(),
                characteristic_uuid: self.characteristic_uuid.wire2api(),
            }
        }
    }
    impl Wire2Api<AoiManufacturerData> for wire_AoiManufacturerData {
        fn wire2api(self) -> AoiManufacturerData {
            AoiManufacturerData {
                manufacturer_id: self.manufacturer_id.wire2api(),
                data: self.data.wire2api(),
            }
        }
    }
    impl Wire2Api<AoiPeripheral> for wire_AoiPeripheral {
        fn wire2api(self) -> AoiPeripheral {
            AoiPeripheral {
                adapter: self.adapter.wire2api(),
                name: self.name.wire2api(),
                address: self.address.wire2api(),
                services: self.services.wire2api(),
                manufacturer_data: self.manufacturer_data.wire2api(),
            }
        }
    }
    impl Wire2Api<AoiPeripheralAddress> for wire_AoiPeripheralAddress {
        fn wire2api(self) -> AoiPeripheralAddress {
            match self.tag {
                0 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.MacAddress);
                    AoiPeripheralAddress::MacAddress(ans.field0.wire2api())
                },
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Uuid);
                    AoiPeripheralAddress::Uuid(ans.field0.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<Box<AoiAdapter>> for *mut wire_AoiAdapter {
        fn wire2api(self) -> Box<AoiAdapter> {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AoiAdapter>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<Box<AoiPeripheral>> for *mut wire_AoiPeripheral {
        fn wire2api(self) -> Box<AoiPeripheral> {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AoiPeripheral>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<Box<AoiPeripheralAddress>> for *mut wire_AoiPeripheralAddress {
        fn wire2api(self) -> Box<AoiPeripheralAddress> {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AoiPeripheralAddress>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<AoiAdapter> for *mut wire_AoiAdapter {
        fn wire2api(self) -> AoiAdapter {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AoiAdapter>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<AoiCharacteristic> for *mut wire_AoiCharacteristic {
        fn wire2api(self) -> AoiCharacteristic {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AoiCharacteristic>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<AoiConnectedPeripheral> for *mut wire_AoiConnectedPeripheral {
        fn wire2api(self) -> AoiConnectedPeripheral {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AoiConnectedPeripheral>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<AoiPeripheral> for *mut wire_AoiPeripheral {
        fn wire2api(self) -> AoiPeripheral {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<AoiPeripheral>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<FilterCriteria> for *mut wire_FilterCriteria {
        fn wire2api(self) -> FilterCriteria {
            let wrap = unsafe { support::box_from_leak_ptr(self) };
            Wire2Api::<FilterCriteria>::wire2api(*wrap).into()
        }
    }
    impl Wire2Api<FilterCriteria> for wire_FilterCriteria {
        fn wire2api(self) -> FilterCriteria {
            match self.tag {
                0 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.Any);
                    FilterCriteria::Any(ans.field0.wire2api())
                },
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.All);
                    FilterCriteria::All(ans.field0.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<FilterCriterion> for wire_FilterCriterion {
        fn wire2api(self) -> FilterCriterion {
            match self.tag {
                0 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.HasServiceUuid);
                    FilterCriterion::HasServiceUuid(ans.field0.wire2api())
                },
                1 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.NameMatchesExactly);
                    FilterCriterion::NameMatchesExactly(ans.field0.wire2api())
                },
                2 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.NameContains);
                    FilterCriterion::NameContains(ans.field0.wire2api())
                },
                3 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.ManufacturerId);
                    FilterCriterion::ManufacturerId(ans.field0.wire2api())
                },
                4 => unsafe {
                    let ans = support::box_from_leak_ptr(self.kind);
                    let ans = support::box_from_leak_ptr(ans.ManufacturerData);
                    FilterCriterion::ManufacturerData(ans.field0.wire2api(), ans.field1.wire2api())
                },
                _ => unreachable!(),
            }
        }
    }
    impl Wire2Api<Vec<AoiCharacteristic>> for *mut wire_list_aoi_characteristic {
        fn wire2api(self) -> Vec<AoiCharacteristic> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<AoiDescriptor>> for *mut wire_list_aoi_descriptor {
        fn wire2api(self) -> Vec<AoiDescriptor> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<AoiManufacturerData>> for *mut wire_list_aoi_manufacturer_data {
        fn wire2api(self) -> Vec<AoiManufacturerData> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }
    impl Wire2Api<Vec<FilterCriterion>> for *mut wire_list_filter_criterion {
        fn wire2api(self) -> Vec<FilterCriterion> {
            let vec = unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            };
            vec.into_iter().map(Wire2Api::wire2api).collect()
        }
    }

    impl Wire2Api<[u8; 6]> for *mut wire_uint_8_list {
        fn wire2api(self) -> [u8; 6] {
            let vec: Vec<u8> = self.wire2api();
            support::from_vec_to_array(vec)
        }
    }
    impl Wire2Api<Vec<u8>> for *mut wire_uint_8_list {
        fn wire2api(self) -> Vec<u8> {
            unsafe {
                let wrap = support::box_from_leak_ptr(self);
                support::vec_from_leak_ptr(wrap.ptr, wrap.len)
            }
        }
    }

    // Section: wire structs

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_StringList {
        ptr: *mut *mut wire_uint_8_list,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiAdapter {
        index: usize,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiCharacteristic {
        uuid: *mut wire_uint_8_list,
        service_uuid: *mut wire_uint_8_list,
        properties_bits: u8,
        descriptors: *mut wire_list_aoi_descriptor,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiConnectedPeripheral {
        peripheral: *mut wire_AoiPeripheral,
        characteristics: *mut wire_list_aoi_characteristic,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiDescriptor {
        uuid: *mut wire_uint_8_list,
        service_uuid: *mut wire_uint_8_list,
        characteristic_uuid: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiManufacturerData {
        manufacturer_id: u16,
        data: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiPeripheral {
        adapter: *mut wire_AoiAdapter,
        name: *mut wire_uint_8_list,
        address: *mut wire_AoiPeripheralAddress,
        services: *mut wire_StringList,
        manufacturer_data: *mut wire_list_aoi_manufacturer_data,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_aoi_characteristic {
        ptr: *mut wire_AoiCharacteristic,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_aoi_descriptor {
        ptr: *mut wire_AoiDescriptor,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_aoi_manufacturer_data {
        ptr: *mut wire_AoiManufacturerData,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_list_filter_criterion {
        ptr: *mut wire_FilterCriterion,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_uint_8_list {
        ptr: *mut u8,
        len: i32,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiPeripheralAddress {
        tag: i32,
        kind: *mut AoiPeripheralAddressKind,
    }

    #[repr(C)]
    pub union AoiPeripheralAddressKind {
        MacAddress: *mut wire_AoiPeripheralAddress_MacAddress,
        Uuid: *mut wire_AoiPeripheralAddress_Uuid,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiPeripheralAddress_MacAddress {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_AoiPeripheralAddress_Uuid {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriteria {
        tag: i32,
        kind: *mut FilterCriteriaKind,
    }

    #[repr(C)]
    pub union FilterCriteriaKind {
        Any: *mut wire_FilterCriteria_Any,
        All: *mut wire_FilterCriteria_All,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriteria_Any {
        field0: *mut wire_list_filter_criterion,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriteria_All {
        field0: *mut wire_list_filter_criterion,
    }
    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriterion {
        tag: i32,
        kind: *mut FilterCriterionKind,
    }

    #[repr(C)]
    pub union FilterCriterionKind {
        HasServiceUuid: *mut wire_FilterCriterion_HasServiceUuid,
        NameMatchesExactly: *mut wire_FilterCriterion_NameMatchesExactly,
        NameContains: *mut wire_FilterCriterion_NameContains,
        ManufacturerId: *mut wire_FilterCriterion_ManufacturerId,
        ManufacturerData: *mut wire_FilterCriterion_ManufacturerData,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriterion_HasServiceUuid {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriterion_NameMatchesExactly {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriterion_NameContains {
        field0: *mut wire_uint_8_list,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriterion_ManufacturerId {
        field0: u16,
    }

    #[repr(C)]
    #[derive(Clone)]
    pub struct wire_FilterCriterion_ManufacturerData {
        field0: u16,
        field1: *mut wire_uint_8_list,
    }

    // Section: impl NewWithNullPtr

    pub trait NewWithNullPtr {
        fn new_with_null_ptr() -> Self;
    }

    impl<T> NewWithNullPtr for *mut T {
        fn new_with_null_ptr() -> Self {
            std::ptr::null_mut()
        }
    }

    impl NewWithNullPtr for wire_AoiAdapter {
        fn new_with_null_ptr() -> Self {
            Self {
                index: Default::default(),
            }
        }
    }

    impl Default for wire_AoiAdapter {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_AoiCharacteristic {
        fn new_with_null_ptr() -> Self {
            Self {
                uuid: core::ptr::null_mut(),
                service_uuid: core::ptr::null_mut(),
                properties_bits: Default::default(),
                descriptors: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AoiCharacteristic {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_AoiConnectedPeripheral {
        fn new_with_null_ptr() -> Self {
            Self {
                peripheral: core::ptr::null_mut(),
                characteristics: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AoiConnectedPeripheral {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_AoiDescriptor {
        fn new_with_null_ptr() -> Self {
            Self {
                uuid: core::ptr::null_mut(),
                service_uuid: core::ptr::null_mut(),
                characteristic_uuid: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AoiDescriptor {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_AoiManufacturerData {
        fn new_with_null_ptr() -> Self {
            Self {
                manufacturer_id: Default::default(),
                data: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AoiManufacturerData {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_AoiPeripheral {
        fn new_with_null_ptr() -> Self {
            Self {
                adapter: core::ptr::null_mut(),
                name: core::ptr::null_mut(),
                address: core::ptr::null_mut(),
                services: core::ptr::null_mut(),
                manufacturer_data: core::ptr::null_mut(),
            }
        }
    }

    impl Default for wire_AoiPeripheral {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl Default for wire_AoiPeripheralAddress {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_AoiPeripheralAddress {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_AoiPeripheralAddress_MacAddress() -> *mut AoiPeripheralAddressKind {
        support::new_leak_box_ptr(AoiPeripheralAddressKind {
            MacAddress: support::new_leak_box_ptr(wire_AoiPeripheralAddress_MacAddress {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_AoiPeripheralAddress_Uuid() -> *mut AoiPeripheralAddressKind {
        support::new_leak_box_ptr(AoiPeripheralAddressKind {
            Uuid: support::new_leak_box_ptr(wire_AoiPeripheralAddress_Uuid {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    impl Default for wire_FilterCriteria {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_FilterCriteria {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_FilterCriteria_Any() -> *mut FilterCriteriaKind {
        support::new_leak_box_ptr(FilterCriteriaKind {
            Any: support::new_leak_box_ptr(wire_FilterCriteria_Any {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_FilterCriteria_All() -> *mut FilterCriteriaKind {
        support::new_leak_box_ptr(FilterCriteriaKind {
            All: support::new_leak_box_ptr(wire_FilterCriteria_All {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    impl Default for wire_FilterCriterion {
        fn default() -> Self {
            Self::new_with_null_ptr()
        }
    }

    impl NewWithNullPtr for wire_FilterCriterion {
        fn new_with_null_ptr() -> Self {
            Self {
                tag: -1,
                kind: core::ptr::null_mut(),
            }
        }
    }

    #[no_mangle]
    pub extern "C" fn inflate_FilterCriterion_HasServiceUuid() -> *mut FilterCriterionKind {
        support::new_leak_box_ptr(FilterCriterionKind {
            HasServiceUuid: support::new_leak_box_ptr(wire_FilterCriterion_HasServiceUuid {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_FilterCriterion_NameMatchesExactly() -> *mut FilterCriterionKind {
        support::new_leak_box_ptr(FilterCriterionKind {
            NameMatchesExactly: support::new_leak_box_ptr(
                wire_FilterCriterion_NameMatchesExactly {
                    field0: core::ptr::null_mut(),
                },
            ),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_FilterCriterion_NameContains() -> *mut FilterCriterionKind {
        support::new_leak_box_ptr(FilterCriterionKind {
            NameContains: support::new_leak_box_ptr(wire_FilterCriterion_NameContains {
                field0: core::ptr::null_mut(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_FilterCriterion_ManufacturerId() -> *mut FilterCriterionKind {
        support::new_leak_box_ptr(FilterCriterionKind {
            ManufacturerId: support::new_leak_box_ptr(wire_FilterCriterion_ManufacturerId {
                field0: Default::default(),
            }),
        })
    }

    #[no_mangle]
    pub extern "C" fn inflate_FilterCriterion_ManufacturerData() -> *mut FilterCriterionKind {
        support::new_leak_box_ptr(FilterCriterionKind {
            ManufacturerData: support::new_leak_box_ptr(wire_FilterCriterion_ManufacturerData {
                field0: Default::default(),
                field1: core::ptr::null_mut(),
            }),
        })
    }

    // Section: sync execution mode utility

    #[no_mangle]
    pub extern "C" fn free_WireSyncReturn(ptr: support::WireSyncReturn) {
        unsafe {
            let _ = support::box_from_leak_ptr(ptr);
        };
    }
}
#[cfg(not(target_family = "wasm"))]
pub use self::io::*;
