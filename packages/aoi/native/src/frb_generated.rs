// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.31.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::transform_result_dco;
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = DcoCodec,
    default_rust_opaque = RustOpaqueNom,
    default_rust_auto_opaque = RustAutoOpaqueNom,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.0.0-dev.31";

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire_aoi_adapter_get_adapters_impl(port_: flutter_rust_bridge::for_generated::MessagePort) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aoi_adapter_get_adapters",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            move |context| {
                transform_result_dco((move || {
                    Result::<_, ()>::Ok(crate::api::AoiAdapter::get_adapters())
                })())
            }
        },
    )
}
fn wire_aoi_adapter_start_scan_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::AoiAdapter>,
    filter: impl CstDecode<Option<crate::api::FilterCriteria>>,
    sink: impl CstDecode<
        StreamSink<crate::api::AoiPeripheral, flutter_rust_bridge::for_generated::DcoCodec>,
    >,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aoi_adapter_start_scan",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_filter = filter.cst_decode();
            let api_sink = sink.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::AoiAdapter::start_scan(&api_that, api_filter, api_sink)
                })())
            }
        },
    )
}
fn wire_aoi_adapter_stop_scan_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::AoiAdapter>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aoi_adapter_stop_scan",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || crate::api::AoiAdapter::stop_scan(&api_that))())
            }
        },
    )
}
fn wire_aoi_connected_peripheral_disconnect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::AoiConnectedPeripheral>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aoi_connected_peripheral_disconnect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::AoiConnectedPeripheral::disconnect(&api_that)
                })())
            }
        },
    )
}
fn wire_aoi_connected_peripheral_read_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::AoiConnectedPeripheral>,
    characteristic: impl CstDecode<crate::api::AoiCharacteristic>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aoi_connected_peripheral_read",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_characteristic = characteristic.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::AoiConnectedPeripheral::read(&api_that, api_characteristic)
                })())
            }
        },
    )
}
fn wire_aoi_connected_peripheral_write_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::AoiConnectedPeripheral>,
    characteristic: impl CstDecode<crate::api::AoiCharacteristic>,
    data: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aoi_connected_peripheral_write",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_characteristic = characteristic.cst_decode();
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::AoiConnectedPeripheral::write(
                        &api_that,
                        api_characteristic,
                        api_data,
                    )
                })())
            }
        },
    )
}
fn wire_aoi_connected_peripheral_write_without_response_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::AoiConnectedPeripheral>,
    characteristic: impl CstDecode<crate::api::AoiCharacteristic>,
    data: impl CstDecode<Vec<u8>>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aoi_connected_peripheral_write_without_response",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            let api_characteristic = characteristic.cst_decode();
            let api_data = data.cst_decode();
            move |context| {
                transform_result_dco((move || {
                    crate::api::AoiConnectedPeripheral::write_without_response(
                        &api_that,
                        api_characteristic,
                        api_data,
                    )
                })())
            }
        },
    )
}
fn wire_aoi_peripheral_connect_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    that: impl CstDecode<crate::api::AoiPeripheral>,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::DcoCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "aoi_peripheral_connect",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let api_that = that.cst_decode();
            move |context| {
                transform_result_dco((move || crate::api::AoiPeripheral::connect(&api_that))())
            }
        },
    )
}

// Section: dart2rust

impl CstDecode<u16> for u16 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u16 {
        self
    }
}
impl CstDecode<u8> for u8 {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> u8 {
        self
    }
}
impl CstDecode<usize> for usize {
    // Codec=Cst (C-struct based), see doc to use other codecs
    fn cst_decode(self) -> usize {
        self
    }
}
impl SseDecode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        unreachable!("");
    }
}

impl SseDecode
    for StreamSink<crate::api::AoiPeripheral, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <String>::sse_decode(deserializer);
        return StreamSink::deserialize(inner);
    }
}

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for crate::api::AoiAdapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_index = <usize>::sse_decode(deserializer);
        return crate::api::AoiAdapter { index: var_index };
    }
}

impl SseDecode for crate::api::AoiCharacteristic {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_uuid = <String>::sse_decode(deserializer);
        let mut var_serviceUuid = <String>::sse_decode(deserializer);
        let mut var_propertiesBits = <u8>::sse_decode(deserializer);
        let mut var_descriptors = <Vec<crate::api::AoiDescriptor>>::sse_decode(deserializer);
        return crate::api::AoiCharacteristic {
            uuid: var_uuid,
            service_uuid: var_serviceUuid,
            properties_bits: var_propertiesBits,
            descriptors: var_descriptors,
        };
    }
}

impl SseDecode for crate::api::AoiConnectedPeripheral {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_peripheral = <Box<crate::api::AoiPeripheral>>::sse_decode(deserializer);
        let mut var_characteristics =
            <Vec<crate::api::AoiCharacteristic>>::sse_decode(deserializer);
        return crate::api::AoiConnectedPeripheral {
            peripheral: var_peripheral,
            characteristics: var_characteristics,
        };
    }
}

impl SseDecode for crate::api::AoiDescriptor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_uuid = <String>::sse_decode(deserializer);
        let mut var_serviceUuid = <String>::sse_decode(deserializer);
        let mut var_characteristicUuid = <String>::sse_decode(deserializer);
        return crate::api::AoiDescriptor {
            uuid: var_uuid,
            service_uuid: var_serviceUuid,
            characteristic_uuid: var_characteristicUuid,
        };
    }
}

impl SseDecode for crate::api::AoiManufacturerData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_manufacturerId = <u16>::sse_decode(deserializer);
        let mut var_data = <Vec<u8>>::sse_decode(deserializer);
        return crate::api::AoiManufacturerData {
            manufacturer_id: var_manufacturerId,
            data: var_data,
        };
    }
}

impl SseDecode for crate::api::AoiPeripheral {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_adapter = <Box<crate::api::AoiAdapter>>::sse_decode(deserializer);
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_address = <Box<crate::api::AoiPeripheralAddress>>::sse_decode(deserializer);
        let mut var_services = <Vec<String>>::sse_decode(deserializer);
        let mut var_manufacturerData =
            <Vec<crate::api::AoiManufacturerData>>::sse_decode(deserializer);
        return crate::api::AoiPeripheral {
            adapter: var_adapter,
            name: var_name,
            address: var_address,
            services: var_services,
            manufacturer_data: var_manufacturerData,
        };
    }
}

impl SseDecode for crate::api::AoiPeripheralAddress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <[u8; 6]>::sse_decode(deserializer);
                return crate::api::AoiPeripheralAddress::MacAddress(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::AoiPeripheralAddress::Uuid(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::AoiPeripheralAddress::DeviceId(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Box<crate::api::AoiAdapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::AoiAdapter>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::AoiPeripheral> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::AoiPeripheral>::sse_decode(deserializer));
    }
}

impl SseDecode for Box<crate::api::AoiPeripheralAddress> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        return Box::new(<crate::api::AoiPeripheralAddress>::sse_decode(deserializer));
    }
}

impl SseDecode for crate::api::FilterCriteria {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <Vec<crate::api::FilterCriterion>>::sse_decode(deserializer);
                return crate::api::FilterCriteria::Any(var_field0);
            }
            1 => {
                let mut var_field0 = <Vec<crate::api::FilterCriterion>>::sse_decode(deserializer);
                return crate::api::FilterCriteria::All(var_field0);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for crate::api::FilterCriterion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut tag_ = <i32>::sse_decode(deserializer);
        match tag_ {
            0 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::FilterCriterion::HasServiceUuid(var_field0);
            }
            1 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::FilterCriterion::NameMatchesExactly(var_field0);
            }
            2 => {
                let mut var_field0 = <String>::sse_decode(deserializer);
                return crate::api::FilterCriterion::NameContains(var_field0);
            }
            3 => {
                let mut var_field0 = <u16>::sse_decode(deserializer);
                return crate::api::FilterCriterion::ManufacturerId(var_field0);
            }
            4 => {
                let mut var_field0 = <u16>::sse_decode(deserializer);
                let mut var_field1 = <Vec<u8>>::sse_decode(deserializer);
                return crate::api::FilterCriterion::ManufacturerData(var_field0, var_field1);
            }
            _ => {
                unimplemented!("");
            }
        }
    }
}

impl SseDecode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<String>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::AoiAdapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::AoiAdapter>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::AoiCharacteristic> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::AoiCharacteristic>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::AoiDescriptor> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::AoiDescriptor>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::AoiManufacturerData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::AoiManufacturerData>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::FilterCriterion> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::FilterCriterion>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<crate::api::FilterCriteria> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<crate::api::FilterCriteria>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u16::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for [u8; 6] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return flutter_rust_bridge::for_generated::from_vec_to_array(inner);
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AoiAdapter {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [self.index.into_into_dart().into_dart()].into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::AoiAdapter {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AoiAdapter> for crate::api::AoiAdapter {
    fn into_into_dart(self) -> crate::api::AoiAdapter {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AoiCharacteristic {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.uuid.into_into_dart().into_dart(),
            self.service_uuid.into_into_dart().into_dart(),
            self.properties_bits.into_into_dart().into_dart(),
            self.descriptors.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::AoiCharacteristic {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AoiCharacteristic>
    for crate::api::AoiCharacteristic
{
    fn into_into_dart(self) -> crate::api::AoiCharacteristic {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AoiConnectedPeripheral {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.peripheral.into_into_dart().into_dart(),
            self.characteristics.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::AoiConnectedPeripheral
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AoiConnectedPeripheral>
    for crate::api::AoiConnectedPeripheral
{
    fn into_into_dart(self) -> crate::api::AoiConnectedPeripheral {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AoiDescriptor {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.uuid.into_into_dart().into_dart(),
            self.service_uuid.into_into_dart().into_dart(),
            self.characteristic_uuid.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::AoiDescriptor {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AoiDescriptor> for crate::api::AoiDescriptor {
    fn into_into_dart(self) -> crate::api::AoiDescriptor {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AoiManufacturerData {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.manufacturer_id.into_into_dart().into_dart(),
            self.data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::AoiManufacturerData
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AoiManufacturerData>
    for crate::api::AoiManufacturerData
{
    fn into_into_dart(self) -> crate::api::AoiManufacturerData {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AoiPeripheral {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.adapter.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.address.into_into_dart().into_dart(),
            self.services.into_into_dart().into_dart(),
            self.manufacturer_data.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::AoiPeripheral {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AoiPeripheral> for crate::api::AoiPeripheral {
    fn into_into_dart(self) -> crate::api::AoiPeripheral {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::AoiPeripheralAddress {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::AoiPeripheralAddress::MacAddress(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::AoiPeripheralAddress::Uuid(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::AoiPeripheralAddress::DeviceId(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::AoiPeripheralAddress
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::AoiPeripheralAddress>
    for crate::api::AoiPeripheralAddress
{
    fn into_into_dart(self) -> crate::api::AoiPeripheralAddress {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::FilterCriteria {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::FilterCriteria::Any(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::FilterCriteria::All(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::FilterCriteria {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::FilterCriteria> for crate::api::FilterCriteria {
    fn into_into_dart(self) -> crate::api::FilterCriteria {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::FilterCriterion {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        match self {
            crate::api::FilterCriterion::HasServiceUuid(field0) => {
                [0.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::FilterCriterion::NameMatchesExactly(field0) => {
                [1.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::FilterCriterion::NameContains(field0) => {
                [2.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::FilterCriterion::ManufacturerId(field0) => {
                [3.into_dart(), field0.into_into_dart().into_dart()].into_dart()
            }
            crate::api::FilterCriterion::ManufacturerData(field0, field1) => [
                4.into_dart(),
                field0.into_into_dart().into_dart(),
                field1.into_into_dart().into_dart(),
            ]
            .into_dart(),
        }
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive for crate::api::FilterCriterion {}
impl flutter_rust_bridge::IntoIntoDart<crate::api::FilterCriterion>
    for crate::api::FilterCriterion
{
    fn into_into_dart(self) -> crate::api::FilterCriterion {
        self
    }
}

impl SseEncode for flutter_rust_bridge::for_generated::anyhow::Error {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(format!("{:?}", self), serializer);
    }
}

impl SseEncode
    for StreamSink<crate::api::AoiPeripheral, flutter_rust_bridge::for_generated::DcoCodec>
{
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        unimplemented!("")
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for crate::api::AoiAdapter {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <usize>::sse_encode(self.index, serializer);
    }
}

impl SseEncode for crate::api::AoiCharacteristic {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.uuid, serializer);
        <String>::sse_encode(self.service_uuid, serializer);
        <u8>::sse_encode(self.properties_bits, serializer);
        <Vec<crate::api::AoiDescriptor>>::sse_encode(self.descriptors, serializer);
    }
}

impl SseEncode for crate::api::AoiConnectedPeripheral {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::AoiPeripheral>>::sse_encode(self.peripheral, serializer);
        <Vec<crate::api::AoiCharacteristic>>::sse_encode(self.characteristics, serializer);
    }
}

impl SseEncode for crate::api::AoiDescriptor {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.uuid, serializer);
        <String>::sse_encode(self.service_uuid, serializer);
        <String>::sse_encode(self.characteristic_uuid, serializer);
    }
}

impl SseEncode for crate::api::AoiManufacturerData {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <u16>::sse_encode(self.manufacturer_id, serializer);
        <Vec<u8>>::sse_encode(self.data, serializer);
    }
}

impl SseEncode for crate::api::AoiPeripheral {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Box<crate::api::AoiAdapter>>::sse_encode(self.adapter, serializer);
        <Option<String>>::sse_encode(self.name, serializer);
        <Box<crate::api::AoiPeripheralAddress>>::sse_encode(self.address, serializer);
        <Vec<String>>::sse_encode(self.services, serializer);
        <Vec<crate::api::AoiManufacturerData>>::sse_encode(self.manufacturer_data, serializer);
    }
}

impl SseEncode for crate::api::AoiPeripheralAddress {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::AoiPeripheralAddress::MacAddress(field0) => {
                <i32>::sse_encode(0, serializer);
                <[u8; 6]>::sse_encode(field0, serializer);
            }
            crate::api::AoiPeripheralAddress::Uuid(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::AoiPeripheralAddress::DeviceId(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for Box<crate::api::AoiAdapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::AoiAdapter>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::AoiPeripheral> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::AoiPeripheral>::sse_encode(*self, serializer);
    }
}

impl SseEncode for Box<crate::api::AoiPeripheralAddress> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <crate::api::AoiPeripheralAddress>::sse_encode(*self, serializer);
    }
}

impl SseEncode for crate::api::FilterCriteria {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::FilterCriteria::Any(field0) => {
                <i32>::sse_encode(0, serializer);
                <Vec<crate::api::FilterCriterion>>::sse_encode(field0, serializer);
            }
            crate::api::FilterCriteria::All(field0) => {
                <i32>::sse_encode(1, serializer);
                <Vec<crate::api::FilterCriterion>>::sse_encode(field0, serializer);
            }
        }
    }
}

impl SseEncode for crate::api::FilterCriterion {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        match self {
            crate::api::FilterCriterion::HasServiceUuid(field0) => {
                <i32>::sse_encode(0, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::FilterCriterion::NameMatchesExactly(field0) => {
                <i32>::sse_encode(1, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::FilterCriterion::NameContains(field0) => {
                <i32>::sse_encode(2, serializer);
                <String>::sse_encode(field0, serializer);
            }
            crate::api::FilterCriterion::ManufacturerId(field0) => {
                <i32>::sse_encode(3, serializer);
                <u16>::sse_encode(field0, serializer);
            }
            crate::api::FilterCriterion::ManufacturerData(field0, field1) => {
                <i32>::sse_encode(4, serializer);
                <u16>::sse_encode(field0, serializer);
                <Vec<u8>>::sse_encode(field1, serializer);
            }
        }
    }
}

impl SseEncode for Vec<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <String>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::AoiAdapter> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::AoiAdapter>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::AoiCharacteristic> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::AoiCharacteristic>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::AoiDescriptor> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::AoiDescriptor>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::AoiManufacturerData> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::AoiManufacturerData>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::FilterCriterion> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::FilterCriterion>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<crate::api::FilterCriteria> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <crate::api::FilterCriteria>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for u16 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u16::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for [u8; 6] {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(
            {
                let boxed: Box<[_]> = Box::new(self);
                boxed.into_vec()
            },
            serializer,
        );
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
#[path = "frb_generated.io.rs"]
mod io;
#[cfg(not(target_family = "wasm"))]
pub use io::*;
