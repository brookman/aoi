// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.6.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:collection/collection.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

part 'bridge_generated.freezed.dart';

abstract class EmbeddedAoi {
  Future<List<AoiAdapter>> getAdaptersStaticMethodAoiAdapter({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAdaptersStaticMethodAoiAdapterConstMeta;

  Stream<AoiPeripheral> startScanMethodAoiAdapter({required AoiAdapter that, FilterCriteria? filter, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartScanMethodAoiAdapterConstMeta;

  Future<void> stopScanMethodAoiAdapter({required AoiAdapter that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopScanMethodAoiAdapterConstMeta;

  Future<AoiConnectedPeripheral> connectMethodAoiPeripheral({required AoiPeripheral that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectMethodAoiPeripheralConstMeta;

  Future<Uint8List> readMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, required AoiCharacteristic characteristic, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadMethodAoiConnectedPeripheralConstMeta;

  Future<void> writeMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, required AoiCharacteristic characteristic, required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteMethodAoiConnectedPeripheralConstMeta;

  Future<void> writeWithoutResponseMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, required AoiCharacteristic characteristic, required Uint8List data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteWithoutResponseMethodAoiConnectedPeripheralConstMeta;

  Future<void> disconnectMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisconnectMethodAoiConnectedPeripheralConstMeta;
}

class AoiAdapter {
  final EmbeddedAoi bridge;
  final int index;

  const AoiAdapter({
    required this.bridge,
    required this.index,
  });

  static Future<List<AoiAdapter>> getAdapters({required EmbeddedAoi bridge, dynamic hint}) => bridge.getAdaptersStaticMethodAoiAdapter(hint: hint);

  Stream<AoiPeripheral> startScan({FilterCriteria? filter, dynamic hint}) => bridge.startScanMethodAoiAdapter(
        that: this,
        filter: filter,
      );

  Future<void> stopScan({dynamic hint}) => bridge.stopScanMethodAoiAdapter(
        that: this,
      );
}

class AoiCharacteristic {
  final String uuid;
  final String serviceUuid;
  final int propertiesBits;
  final List<AoiDescriptor> descriptors;

  const AoiCharacteristic({
    required this.uuid,
    required this.serviceUuid,
    required this.propertiesBits,
    required this.descriptors,
  });
}

class AoiConnectedPeripheral {
  final EmbeddedAoi bridge;
  final AoiPeripheral peripheral;
  final List<AoiCharacteristic> characteristics;

  const AoiConnectedPeripheral({
    required this.bridge,
    required this.peripheral,
    required this.characteristics,
  });

  Future<Uint8List> read({required AoiCharacteristic characteristic, dynamic hint}) => bridge.readMethodAoiConnectedPeripheral(
        that: this,
        characteristic: characteristic,
      );

  Future<void> write({required AoiCharacteristic characteristic, required Uint8List data, dynamic hint}) => bridge.writeMethodAoiConnectedPeripheral(
        that: this,
        characteristic: characteristic,
        data: data,
      );

  Future<void> writeWithoutResponse({required AoiCharacteristic characteristic, required Uint8List data, dynamic hint}) => bridge.writeWithoutResponseMethodAoiConnectedPeripheral(
        that: this,
        characteristic: characteristic,
        data: data,
      );

  Future<void> disconnect({dynamic hint}) => bridge.disconnectMethodAoiConnectedPeripheral(
        that: this,
      );
}

class AoiDescriptor {
  final String uuid;
  final String serviceUuid;
  final String characteristicUuid;

  const AoiDescriptor({
    required this.uuid,
    required this.serviceUuid,
    required this.characteristicUuid,
  });
}

class AoiManufacturerData {
  final int manufacturerId;
  final Uint8List data;

  const AoiManufacturerData({
    required this.manufacturerId,
    required this.data,
  });
}

class AoiPeripheral {
  final EmbeddedAoi bridge;
  final AoiAdapter adapter;
  final String? name;
  final AoiPeripheralAddress address;
  final List<String> services;
  final List<AoiManufacturerData> manufacturerData;

  const AoiPeripheral({
    required this.bridge,
    required this.adapter,
    this.name,
    required this.address,
    required this.services,
    required this.manufacturerData,
  });

  Future<AoiConnectedPeripheral> connect({dynamic hint}) => bridge.connectMethodAoiPeripheral(
        that: this,
      );
}

@freezed
class AoiPeripheralAddress with _$AoiPeripheralAddress {
  const factory AoiPeripheralAddress.macAddress(
    U8Array6 field0,
  ) = AoiPeripheralAddress_MacAddress;
  const factory AoiPeripheralAddress.uuid(
    String field0,
  ) = AoiPeripheralAddress_Uuid;
}

@freezed
class FilterCriteria with _$FilterCriteria {
  const factory FilterCriteria.any(
    List<FilterCriterion> field0,
  ) = FilterCriteria_Any;
  const factory FilterCriteria.all(
    List<FilterCriterion> field0,
  ) = FilterCriteria_All;
}

@freezed
class FilterCriterion with _$FilterCriterion {
  const factory FilterCriterion.hasServiceUuid(
    String field0,
  ) = FilterCriterion_HasServiceUuid;
  const factory FilterCriterion.nameMatchesExactly(
    String field0,
  ) = FilterCriterion_NameMatchesExactly;
  const factory FilterCriterion.nameContains(
    String field0,
  ) = FilterCriterion_NameContains;
  const factory FilterCriterion.manufacturerId(
    int field0,
  ) = FilterCriterion_ManufacturerId;
  const factory FilterCriterion.manufacturerData(
    int field0,
    Uint8List field1,
  ) = FilterCriterion_ManufacturerData;
}

class U8Array6 extends NonGrowableListView<int> {
  static const arraySize = 6;
  U8Array6(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array6.unchecked(Uint8List inner) : super(inner);
  U8Array6.init() : super(Uint8List(arraySize));
}

class EmbeddedAoiImpl implements EmbeddedAoi {
  final EmbeddedAoiPlatform _platform;
  factory EmbeddedAoiImpl(ExternalLibrary dylib) => EmbeddedAoiImpl.raw(EmbeddedAoiPlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory EmbeddedAoiImpl.wasm(FutureOr<WasmModule> module) => EmbeddedAoiImpl(module as ExternalLibrary);
  EmbeddedAoiImpl.raw(this._platform);
  Future<List<AoiAdapter>> getAdaptersStaticMethodAoiAdapter({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_adapters__static_method__AoiAdapter(port_),
      parseSuccessData: _wire2api_list_aoi_adapter,
      parseErrorData: null,
      constMeta: kGetAdaptersStaticMethodAoiAdapterConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetAdaptersStaticMethodAoiAdapterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_adapters__static_method__AoiAdapter",
        argNames: [],
      );

  Stream<AoiPeripheral> startScanMethodAoiAdapter({required AoiAdapter that, FilterCriteria? filter, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aoi_adapter(that);
    var arg1 = _platform.api2wire_opt_box_autoadd_filter_criteria(filter);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start_scan__method__AoiAdapter(port_, arg0, arg1),
      parseSuccessData: (d) => _wire2api_aoi_peripheral(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStartScanMethodAoiAdapterConstMeta,
      argValues: [
        that,
        filter
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartScanMethodAoiAdapterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "start_scan__method__AoiAdapter",
        argNames: [
          "that",
          "filter"
        ],
      );

  Future<void> stopScanMethodAoiAdapter({required AoiAdapter that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aoi_adapter(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stop_scan__method__AoiAdapter(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStopScanMethodAoiAdapterConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopScanMethodAoiAdapterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_scan__method__AoiAdapter",
        argNames: [
          "that"
        ],
      );

  Future<AoiConnectedPeripheral> connectMethodAoiPeripheral({required AoiPeripheral that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aoi_peripheral(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect__method__AoiPeripheral(port_, arg0),
      parseSuccessData: (d) => _wire2api_aoi_connected_peripheral(d),
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kConnectMethodAoiPeripheralConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectMethodAoiPeripheralConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect__method__AoiPeripheral",
        argNames: [
          "that"
        ],
      );

  Future<Uint8List> readMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, required AoiCharacteristic characteristic, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aoi_connected_peripheral(that);
    var arg1 = _platform.api2wire_box_autoadd_aoi_characteristic(characteristic);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_read__method__AoiConnectedPeripheral(port_, arg0, arg1),
      parseSuccessData: _wire2api_uint_8_list,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kReadMethodAoiConnectedPeripheralConstMeta,
      argValues: [
        that,
        characteristic
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReadMethodAoiConnectedPeripheralConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "read__method__AoiConnectedPeripheral",
        argNames: [
          "that",
          "characteristic"
        ],
      );

  Future<void> writeMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, required AoiCharacteristic characteristic, required Uint8List data, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aoi_connected_peripheral(that);
    var arg1 = _platform.api2wire_box_autoadd_aoi_characteristic(characteristic);
    var arg2 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_write__method__AoiConnectedPeripheral(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kWriteMethodAoiConnectedPeripheralConstMeta,
      argValues: [
        that,
        characteristic,
        data
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWriteMethodAoiConnectedPeripheralConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "write__method__AoiConnectedPeripheral",
        argNames: [
          "that",
          "characteristic",
          "data"
        ],
      );

  Future<void> writeWithoutResponseMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, required AoiCharacteristic characteristic, required Uint8List data, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aoi_connected_peripheral(that);
    var arg1 = _platform.api2wire_box_autoadd_aoi_characteristic(characteristic);
    var arg2 = _platform.api2wire_uint_8_list(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_write_without_response__method__AoiConnectedPeripheral(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kWriteWithoutResponseMethodAoiConnectedPeripheralConstMeta,
      argValues: [
        that,
        characteristic,
        data
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWriteWithoutResponseMethodAoiConnectedPeripheralConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "write_without_response__method__AoiConnectedPeripheral",
        argNames: [
          "that",
          "characteristic",
          "data"
        ],
      );

  Future<void> disconnectMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_aoi_connected_peripheral(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_disconnect__method__AoiConnectedPeripheral(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kDisconnectMethodAoiConnectedPeripheralConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDisconnectMethodAoiConnectedPeripheralConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "disconnect__method__AoiConnectedPeripheral",
        argNames: [
          "that"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AoiAdapter _wire2api_aoi_adapter(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AoiAdapter(
      bridge: this,
      index: _wire2api_usize(arr[0]),
    );
  }

  AoiCharacteristic _wire2api_aoi_characteristic(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return AoiCharacteristic(
      uuid: _wire2api_String(arr[0]),
      serviceUuid: _wire2api_String(arr[1]),
      propertiesBits: _wire2api_u8(arr[2]),
      descriptors: _wire2api_list_aoi_descriptor(arr[3]),
    );
  }

  AoiConnectedPeripheral _wire2api_aoi_connected_peripheral(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AoiConnectedPeripheral(
      bridge: this,
      peripheral: _wire2api_box_aoi_peripheral(arr[0]),
      characteristics: _wire2api_list_aoi_characteristic(arr[1]),
    );
  }

  AoiDescriptor _wire2api_aoi_descriptor(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return AoiDescriptor(
      uuid: _wire2api_String(arr[0]),
      serviceUuid: _wire2api_String(arr[1]),
      characteristicUuid: _wire2api_String(arr[2]),
    );
  }

  AoiManufacturerData _wire2api_aoi_manufacturer_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AoiManufacturerData(
      manufacturerId: _wire2api_u16(arr[0]),
      data: _wire2api_uint_8_list(arr[1]),
    );
  }

  AoiPeripheral _wire2api_aoi_peripheral(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return AoiPeripheral(
      bridge: this,
      adapter: _wire2api_box_aoi_adapter(arr[0]),
      name: _wire2api_opt_String(arr[1]),
      address: _wire2api_box_aoi_peripheral_address(arr[2]),
      services: _wire2api_StringList(arr[3]),
      manufacturerData: _wire2api_list_aoi_manufacturer_data(arr[4]),
    );
  }

  AoiPeripheralAddress _wire2api_aoi_peripheral_address(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AoiPeripheralAddress_MacAddress(
          _wire2api_u8_array_6(raw[1]),
        );
      case 1:
        return AoiPeripheralAddress_Uuid(
          _wire2api_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  AoiAdapter _wire2api_box_aoi_adapter(dynamic raw) {
    return _wire2api_aoi_adapter(raw);
  }

  AoiPeripheral _wire2api_box_aoi_peripheral(dynamic raw) {
    return _wire2api_aoi_peripheral(raw);
  }

  AoiPeripheralAddress _wire2api_box_aoi_peripheral_address(dynamic raw) {
    return _wire2api_aoi_peripheral_address(raw);
  }

  List<AoiAdapter> _wire2api_list_aoi_adapter(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_aoi_adapter).toList();
  }

  List<AoiCharacteristic> _wire2api_list_aoi_characteristic(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_aoi_characteristic).toList();
  }

  List<AoiDescriptor> _wire2api_list_aoi_descriptor(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_aoi_descriptor).toList();
  }

  List<AoiManufacturerData> _wire2api_list_aoi_manufacturer_data(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_aoi_manufacturer_data).toList();
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  U8Array6 _wire2api_u8_array_6(dynamic raw) {
    return U8Array6(_wire2api_uint_8_list(raw));
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }
}

// Section: api2wire

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer
