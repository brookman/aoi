// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.62.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
import 'package:collection/collection.dart';

part 'bridge_definitions.freezed.dart';

abstract class Native {
  Future<List<AoiAdapter>> getAdaptersStaticMethodAoiAdapter({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAdaptersStaticMethodAoiAdapterConstMeta;

  Stream<AoiPeripheral> startScanMethodAoiAdapter({required AoiAdapter that, FilterCriteria? filter, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartScanMethodAoiAdapterConstMeta;

  Future<void> stopScanMethodAoiAdapter({required AoiAdapter that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopScanMethodAoiAdapterConstMeta;

  Future<AoiConnectedPeripheral> connectMethodAoiPeripheral({required AoiPeripheral that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectMethodAoiPeripheralConstMeta;

  Future<Uint8List> readMethodAoiConnectedPeripheral(
      {required AoiConnectedPeripheral that, required AoiCharacteristic characteristic, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReadMethodAoiConnectedPeripheralConstMeta;

  Future<void> writeMethodAoiConnectedPeripheral(
      {required AoiConnectedPeripheral that,
      required AoiCharacteristic characteristic,
      required Uint8List data,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWriteMethodAoiConnectedPeripheralConstMeta;

  Future<void> disconnectMethodAoiConnectedPeripheral({required AoiConnectedPeripheral that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDisconnectMethodAoiConnectedPeripheralConstMeta;

  Future<Int32List> getPropertiesMethodAoiCharacteristic({required AoiCharacteristic that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetPropertiesMethodAoiCharacteristicConstMeta;
}

class AoiAdapter {
  final Native bridge;
  final int index;

  AoiAdapter({
    required this.bridge,
    required this.index,
  });

  static Future<List<AoiAdapter>> getAdapters({required Native bridge, dynamic hint}) =>
      bridge.getAdaptersStaticMethodAoiAdapter(hint: hint);

  Stream<AoiPeripheral> startScan({FilterCriteria? filter, dynamic hint}) => bridge.startScanMethodAoiAdapter(
        that: this,
        filter: filter,
      );

  Future<void> stopScan({dynamic hint}) => bridge.stopScanMethodAoiAdapter(
        that: this,
      );
}

class AoiCharacteristic {
  final Native bridge;
  final String uuid;
  final String serviceUuid;
  final int properties;

  AoiCharacteristic({
    required this.bridge,
    required this.uuid,
    required this.serviceUuid,
    required this.properties,
  });

  Future<Int32List> getProperties({dynamic hint}) => bridge.getPropertiesMethodAoiCharacteristic(
        that: this,
      );
}

class AoiConnectedPeripheral {
  final Native bridge;
  final AoiPeripheral peripheral;
  final List<AoiCharacteristic> characteristics;

  AoiConnectedPeripheral({
    required this.bridge,
    required this.peripheral,
    required this.characteristics,
  });

  Future<Uint8List> read({required AoiCharacteristic characteristic, dynamic hint}) =>
      bridge.readMethodAoiConnectedPeripheral(
        that: this,
        characteristic: characteristic,
      );

  Future<void> write({required AoiCharacteristic characteristic, required Uint8List data, dynamic hint}) =>
      bridge.writeMethodAoiConnectedPeripheral(
        that: this,
        characteristic: characteristic,
        data: data,
      );

  Future<void> disconnect({dynamic hint}) => bridge.disconnectMethodAoiConnectedPeripheral(
        that: this,
      );
}

class AoiPeripheral {
  final Native bridge;
  final AoiAdapter adapter;
  final String? name;
  final AoiPeripheralAddress address;
  final List<String> services;
  final Uint8List manufacturerData;

  AoiPeripheral({
    required this.bridge,
    required this.adapter,
    this.name,
    required this.address,
    required this.services,
    required this.manufacturerData,
  });

  Future<AoiConnectedPeripheral> connect({dynamic hint}) => bridge.connectMethodAoiPeripheral(
        that: this,
      );
}

@freezed
class AoiPeripheralAddress with _$AoiPeripheralAddress {
  const factory AoiPeripheralAddress.macAddress(
    U8Array6 field0,
  ) = AoiPeripheralAddress_MacAddress;
  const factory AoiPeripheralAddress.uuid(
    String field0,
  ) = AoiPeripheralAddress_Uuid;
}

@freezed
class FilterCriteria with _$FilterCriteria {
  const factory FilterCriteria.any(
    List<FilterCriterion> field0,
  ) = FilterCriteria_Any;
  const factory FilterCriteria.all(
    List<FilterCriterion> field0,
  ) = FilterCriteria_All;
}

@freezed
class FilterCriterion with _$FilterCriterion {
  const factory FilterCriterion.hasServiceUuid(
    String field0,
  ) = FilterCriterion_HasServiceUuid;
  const factory FilterCriterion.nameMatchesExactly(
    String field0,
  ) = FilterCriterion_NameMatchesExactly;
  const factory FilterCriterion.nameContains(
    String field0,
  ) = FilterCriterion_NameContains;
  const factory FilterCriterion.manufacturerDataMatches(
    Uint8List field0,
  ) = FilterCriterion_ManufacturerDataMatches;
}

class U8Array6 extends NonGrowableListView<int> {
  static const arraySize = 6;
  U8Array6(Uint8List inner)
      : assert(inner.length == arraySize),
        super(inner);
  U8Array6.unchecked(Uint8List inner) : super(inner);
  U8Array6.init() : super(Uint8List(arraySize));
}
