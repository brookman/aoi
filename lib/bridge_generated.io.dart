// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.62.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  int api2wire_Chrono_Duration(Duration raw) {
    return api2wire_i64(raw.inMicroseconds);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_Uuid(UuidValue raw) {
    return api2wire_uint_8_list(raw.toBytes());
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_list_search_criteria> api2wire_list_search_criteria(List<SearchCriteria> raw) {
    final ans = inner.new_list_search_criteria_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_search_criteria(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_list_search_criterion> api2wire_list_search_criterion(List<SearchCriterion> raw) {
    final ans = inner.new_list_search_criterion_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_search_criterion(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_search_criteria(SearchCriteria apiObj, wire_SearchCriteria wireObj) {
    if (apiObj is SearchCriteria_Any) {
      var pre_field0 = api2wire_list_search_criterion(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_SearchCriteria_Any();
      wireObj.kind.ref.Any.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SearchCriteria_All) {
      var pre_field0 = api2wire_list_search_criterion(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_SearchCriteria_All();
      wireObj.kind.ref.All.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_search_criterion(SearchCriterion apiObj, wire_SearchCriterion wireObj) {
    if (apiObj is SearchCriterion_WithService) {
      var pre_field0 = api2wire_Uuid(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_SearchCriterion_WithService();
      wireObj.kind.ref.WithService.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SearchCriterion_NameMatchesExactly) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_SearchCriterion_NameMatchesExactly();
      wireObj.kind.ref.NameMatchesExactly.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is SearchCriterion_NameContains) {
      var pre_field0 = api2wire_String(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_SearchCriterion_NameContains();
      wireObj.kind.ref.NameContains.ref.field0 = pre_field0;
      return;
    }
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platformPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_platform');
  late final _wire_platform = _wire_platformPtr.asFunction<void Function(int)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_rust_release_mode');
  late final _wire_rust_release_mode = _wire_rust_release_modePtr.asFunction<void Function(int)>();

  void wire_find_ble_devices(
    int port_,
    ffi.Pointer<wire_list_search_criteria> search_criteria,
    int search_duration,
  ) {
    return _wire_find_ble_devices(
      port_,
      search_criteria,
      search_duration,
    );
  }

  late final _wire_find_ble_devicesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_list_search_criteria>, ffi.Int64)>>(
          'wire_find_ble_devices');
  late final _wire_find_ble_devices =
      _wire_find_ble_devicesPtr.asFunction<void Function(int, ffi.Pointer<wire_list_search_criteria>, int)>();

  ffi.Pointer<wire_list_search_criteria> new_list_search_criteria_0(
    int len,
  ) {
    return _new_list_search_criteria_0(
      len,
    );
  }

  late final _new_list_search_criteria_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_search_criteria> Function(ffi.Int32)>>(
          'new_list_search_criteria_0');
  late final _new_list_search_criteria_0 =
      _new_list_search_criteria_0Ptr.asFunction<ffi.Pointer<wire_list_search_criteria> Function(int)>();

  ffi.Pointer<wire_list_search_criterion> new_list_search_criterion_0(
    int len,
  ) {
    return _new_list_search_criterion_0(
      len,
    );
  }

  late final _new_list_search_criterion_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_search_criterion> Function(ffi.Int32)>>(
          'new_list_search_criterion_0');
  late final _new_list_search_criterion_0 =
      _new_list_search_criterion_0Ptr.asFunction<ffi.Pointer<wire_list_search_criterion> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<SearchCriteriaKind> inflate_SearchCriteria_Any() {
    return _inflate_SearchCriteria_Any();
  }

  late final _inflate_SearchCriteria_AnyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SearchCriteriaKind> Function()>>('inflate_SearchCriteria_Any');
  late final _inflate_SearchCriteria_Any =
      _inflate_SearchCriteria_AnyPtr.asFunction<ffi.Pointer<SearchCriteriaKind> Function()>();

  ffi.Pointer<SearchCriteriaKind> inflate_SearchCriteria_All() {
    return _inflate_SearchCriteria_All();
  }

  late final _inflate_SearchCriteria_AllPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SearchCriteriaKind> Function()>>('inflate_SearchCriteria_All');
  late final _inflate_SearchCriteria_All =
      _inflate_SearchCriteria_AllPtr.asFunction<ffi.Pointer<SearchCriteriaKind> Function()>();

  ffi.Pointer<SearchCriterionKind> inflate_SearchCriterion_WithService() {
    return _inflate_SearchCriterion_WithService();
  }

  late final _inflate_SearchCriterion_WithServicePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SearchCriterionKind> Function()>>('inflate_SearchCriterion_WithService');
  late final _inflate_SearchCriterion_WithService =
      _inflate_SearchCriterion_WithServicePtr.asFunction<ffi.Pointer<SearchCriterionKind> Function()>();

  ffi.Pointer<SearchCriterionKind> inflate_SearchCriterion_NameMatchesExactly() {
    return _inflate_SearchCriterion_NameMatchesExactly();
  }

  late final _inflate_SearchCriterion_NameMatchesExactlyPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SearchCriterionKind> Function()>>(
          'inflate_SearchCriterion_NameMatchesExactly');
  late final _inflate_SearchCriterion_NameMatchesExactly =
      _inflate_SearchCriterion_NameMatchesExactlyPtr.asFunction<ffi.Pointer<SearchCriterionKind> Function()>();

  ffi.Pointer<SearchCriterionKind> inflate_SearchCriterion_NameContains() {
    return _inflate_SearchCriterion_NameContains();
  }

  late final _inflate_SearchCriterion_NameContainsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SearchCriterionKind> Function()>>('inflate_SearchCriterion_NameContains');
  late final _inflate_SearchCriterion_NameContains =
      _inflate_SearchCriterion_NameContainsPtr.asFunction<ffi.Pointer<SearchCriterionKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_SearchCriterion_WithService extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_SearchCriterion_NameMatchesExactly extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class wire_SearchCriterion_NameContains extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> field0;
}

class SearchCriterionKind extends ffi.Union {
  external ffi.Pointer<wire_SearchCriterion_WithService> WithService;

  external ffi.Pointer<wire_SearchCriterion_NameMatchesExactly> NameMatchesExactly;

  external ffi.Pointer<wire_SearchCriterion_NameContains> NameContains;
}

class wire_SearchCriterion extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SearchCriterionKind> kind;
}

class wire_list_search_criterion extends ffi.Struct {
  external ffi.Pointer<wire_SearchCriterion> ptr;

  @ffi.Int32()
  external int len;
}

class wire_SearchCriteria_Any extends ffi.Struct {
  external ffi.Pointer<wire_list_search_criterion> field0;
}

class wire_SearchCriteria_All extends ffi.Struct {
  external ffi.Pointer<wire_list_search_criterion> field0;
}

class SearchCriteriaKind extends ffi.Union {
  external ffi.Pointer<wire_SearchCriteria_Any> Any;

  external ffi.Pointer<wire_SearchCriteria_All> All;
}

class wire_SearchCriteria extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<SearchCriteriaKind> kind;
}

class wire_list_search_criteria extends ffi.Struct {
  external ffi.Pointer<wire_SearchCriteria> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
